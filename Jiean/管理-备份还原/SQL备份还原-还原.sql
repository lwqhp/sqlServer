

--还原
/*

根据还原的级别有4种备份级别
1)数据库完整还原
还原和恢复整个数据库，数据库在还原和恢复操作期间会处于离线状态。

2）文件还原
还原和恢复一个数据文件或一组文件，在文件还原过程中，包含相应文件的文件组在还原过程中自动变为离线状态。访问
离线文件组的任何尝试会导致错误，但是其他文件组有可能还能保持在线

3)页面还原
在完整恢复模式或大容量日志恢复模式下，可以对数据库指定还原特定的一个或一些数据页面，而无须把整个数据库或整
个文件都重新创建一遍，对于只损坏了很少一部份页面的大数据库，这种不原方式可以大大节约还原时间。

4）段落还原
在大型数据库里，往往包含了若干个文件或文件组，使用段落还原可以使用数据库在还原了一部份文件或文件组以后，这部
份数据可以被访问，从而达到缩短数据库离线时间的目的。


数据库的还原有一个固定的过程
1)数据复制阶段，此阶段将创建数据库的所有数据文件和日志文件，并从指定的备份媒体中 复制指定备份集中备份的数据，日志和索引到数据
库和各个对应的文件中。
2）重做与前滚：在此阶段，所有记录的事务应用到数据复制阶段恢复的数据中。
3）撤消与回滚：回滚所有未提交的事务。完成此阶段后，数据库可以被用户使用，但无法再在此基础上还原其后续的备份。

还原选项
备份还原后，数据库是交付给用户使用，还是保持还原状态，以等待在此基础上继续还原后续的备份，这取决于还原
备份时所使用的是recovery 还是nocoverry选项
*/

--数据库完整还原------------------------------------------------------------

/*1)试图创建一个尾日志备份，备份当前的活动事务日志，如果活动事务日志在灾难发生后变得不可用，则该日志部份的所
有事务将丢失。
*/
BACKUP LOG [Test] TO DISK='e:\Testlog.bak' WITH norecovery;

/*2)还原最新完整数据库备份，而且不做事务恢复
*/
RESTORE DATABASE [Test] FROM DISK='e:\test.bak'
WITH FILE=1,NORECOVERY;

--3)如果存在差异备份，则还原最新的差异备份，而不做事务恢复
RESTORE DATABASE [Test]	 FROM DISK='e:testdiff.bak' 
WITH norecovery;

--4)从还原备份后创建的第一个事务日志备份开始，使用norecovery依次还原日志.
RESTORE LOG [Test] FROM DISK='e:\testlog.bak' 
WITH FILE=2,NORECOVERY;

--5)恢复数据库到某个时间点,用stopat恢复尾日志备份
RESTORE LOG [Test] FROM DISK='e:\testlog2.bak' 
WITH FILE=3,STOPAT ='2013-12-07 14:23:59.997',RECOVERY;
/*
完整备份还原缺点：
1）做一次完整还原需要的时间，几百G的数据库还原，往往需要几个小时。
2）还原需要的空间是备份的两倍，一个放备份，一个放还原库
*/

--文件还原-------------------------------------------------------------------
/*
如果损坏是集中在其中一个文件工文件组上，而其他大部份的数据文件没有损坏，只恢复损坏的文件。
数据库的事务修改是会分布在各个数据文件上的，如果用备份只恢复其中一个文件，而其他文件不恢复，那它们的状态
一定公不一致，一定会有许多修改在被恢复文件里没有被包含进来，这需要恢复之前，必须做一次当前数据库的日志备份，
恢复所有日志备份
*/

/*1)做一个尾日志备份
对于离线文件还原，在文件还原之前必须始终先进行一次尾日志备份。。
对于在线文件不寄托，在文件还原之后必须始终先进行一次日志备份，此日志备份对于将文件恢复到与数据库的其余部分一
致的状态至关重要。如果因为日显示屏 已损坏而无法执行此操作，则文件还无法进行，必须还原整个数据库。
*/

--2）从每个损坏的文件的最瓣文件备份还原相应的文件。在线还原文件a1，此时文件a1处理restoring状态
RESTORE DATABASE [Test] FILE='a1' FROM BACKUP WITH norecovery;

--完成文件还原之后，数据库管理员进行新的日志备份以确保捕获到该文件离线时的点
BACKUP LOG [test] TO log_3 WITH copy_only;


--3）针对每个还原文件，还原最近的差异文件备份(如果有)

/*4)按顺序还原事务日显示屏 备份，从覆盖最早还原文件的备份开始，到在步骤2中创建的尾日志备份结束
虽然这里恢复的日志备份针对的是整个数据库，但是事务日显示屏 备份的恢复会是比较迅速的，因为这里仅处理对还原文件
所做的更改，与还原整个数据库相比，这样做会节省很多时间。
*/
RESTORE LOG [test] FROM log_1 WITH norecovery;
RESTORE LOG [test] FROM log_3 WITH recovery;

--页面还原-------------------------------------------------------------------
/*
数据库的的每个文件都能打开，只是其中的一些页面坏了。尝试借助dbcc checkdb进行数据库修复，如果dbcc命令无法在不
丢数据的前提下修复数据，或者甚至是允许丢数据也修不好数据库，管理员只能做数据库完整恢复。

通常，要进行还原的页面已经由于在访问该页面时遇到错误而标记为"可疑"，可疑页面在msdb数据库的suspect_pages表中进行
了标识，可以立即还原多个数据库页面，在页面还原后，也要恢复所有的日志文件备份，每次传递日志重做，前滚集都会前进一步。

注：页面还原仅可以还原数据页面，且必须
1,数据库必须使用完整恢复模式
2，只读文件组中的页面无法还原
3，还原顺序必须从完整备份，文件备份或文件组备份中恢复页面开始。
4，页面还原需要截止到当前日志文件的连续日志备份，并且必须恢复所有这些日志备份后，页面才能恢复到当前正常状态。
如果数据库曾做过截断日志动作，或者日志备份找不到，那也不法进行页面恢复。
5，数据库备份和页面还原不能同时运和。
*/

/*1，获取要还原的损坏页面的页ID，当sqlserver遇到检验或殊缺写错误时，会返回页面编号，并交这些信息记录下来，可以
通过查询msdb数据库里的suspect_pages表，或者监视事件和sql server errorlog文件里所报出的错误信息，查找坏页面ID。

2,从包含页完整数据库备份，文件备份或文件组备份开始进行页面还原，在restore database 语句中，使用page子句列出
所有要还原页面的页ID.
page = 'file:gage'

3,应用最近的差异备份

4，应用后续的日志备份

5，创建新的数据库尾日志备份

6，还原新的尾日志备份，应用这个新的日志备份后，就完成了页面还原，可以开始正常访问页面了
*/

RESTORE DATABASE [test] PAGE ='1:57,1:202,1:916,1:1016'
FROM backupFile WITH norecovery;

RESTORE LOG [Test]
FROM logback WITH norecovery;

RESTORE LOG [test] FROM logbackup2 WITH norecovery;

BACKUP LOG [Test] TO new_log_backup
RESTORE LOG [Test] FROM new_log_backup WITH recovery;

