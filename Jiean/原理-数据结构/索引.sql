

--数据结构之--索引
/*

B树：B树是平衡树的一种特例，“不存在叶子节点比其他叶子节点到根的距离要远得多的树”

当sqlserver要在索引的叶层执行有序扫描时，扫描会沿着索引页链表进行，称为索引顺序扫描。

除了链表，sqlserver还会维护一个IAM页，用于对索引中存储的数据按文件顺序进行映射。当sqlserver对索引的叶层执行无序扫描时
，使用IAM页扫描，称为分配顺序扫描。

这两种扫描之间的性能差异取决于索引的碎片级别，因为io最大的开销是磁盘臂的移动，如果在没有碎片的索引中执行索引顺序扫描，
其总体性能与分配顺序扫描相差无几，但如果索引的碎片级别较高，则索引顺序扫描要慢得多。(索引扫描和表扫描)

碎片:也称为逻辑扫描碎片
主要是因为页在索引的叶级不断地拆分，当将一个行插入到数据页，但目标页没有足够的空间容纳该行时，叶子页就会发生拆分。
（索引是根据索引键的顺序来维护数据的有序性的，行必须根据它的键值进入到特定的页面，如果目标页满了，sqlserver将拆分
该页，它会分配一个新的页，把大约一半的行从原来的页移动到新页，再根据键值将新行插入到原来的页或新页，并调整链表以反
映页的正确逻辑顺序,在页的物理顺序上，新页是不保证一定就在被拆分的页的紧后面，而是可能在文件后面的任何位置）

对于逻辑扫描碎片，用在索引叶层中的无序页占总页数的百分比来度量它的级别(无序页就是根据链表，在逻辑上位于某个页之后，
但在物理文件中却位于该页之前的那些页。)

--中间级和导航
索引的非叶级称为中间级，非叶级索引页中的每一行指向它下一级的整个页，该行包含两个元素，被指向的索引中第一行的键值，以及
指向该页的一个6字节的指针，指针包含数据库中的文件号和文件中的页号，当sqlserver构造索引时，它从叶级开始，逐淅向上添加级，
当一个级只包含一个页时，这时该页就称为根页。

在定位叶级的特定键时，sqlServer使用一种称为索引查找的方法定位，先从根开始，然后跳到下一级的相关页，再跳到下一级页，直
到达到包含查找键的叶级页。（所有叶级页到根页的距离都是相同的，这意味着对于一次查找操作的开销，其页读取次数和索引的级
数一样多，这些读操作的io模式不是连续io,而是随机io,页很少是相邻的）

所以，在评估性能时，知道一个索引有多少级是非常重要的，因为这个数字正好是一次查找操作在页读取方面的开销,而且一些执行计
划会重复多次调用查找操作，比如nested loops.

select indexproperty(ojbect_ida('tbname'),'索引名','IndexDepth')

有一些关于索引页的计算算法，可以参与《技术内幕T-SQL》，这里只说下总结：一般情况，对于小表，大多数索引通常只有2级，
而对于大表，通常包含3级或4级，除非索引键的总太小非常用大。 


------
堆上的非聚集索引
在堆表上的叶级索行页上，行记录是指向数据行的一个8字节的物理指针定位符，称为RID,它由数据中的文件号，文件中的目标页号，
目标页中的行号组成。

当通过索引查找特定的数据行时，sqlserver必须在查找操作后执行一个RID lookup操作，该操作用于读取包含数据行的页,
因此RID Lookup的开销是一个页读取，对于一次lookup 或少量的lookup，开销并不高,但对于大量lookup来说，开销会非常高，因为
sqlserver需要为找到的每一行读取整个页，对于使用非聚集索引的范围查询，累计开销会很大。

聚集表上的非聚集索引
与在堆表的非聚集索引的区别是，叶级上的定位符是一个聚集键，而不是RID

在查找特定键并到达相应的叶级行，并访问了指向行的聚集键，但为了真正取回被指向的行，lookup操作还要在聚集索引内根据得到
聚集键执行一次完整的查找操作，这种查询操作称为 key Lookup。与RID lookup不同，这里每次lookup操作的开销(按照页读取的
次数)与聚集索引的级数一样高，而当表是一个堆时，RID lookup的开销只有一个页读取。这种查找与堆表的非聚集索引开销是1:L,
L是聚集索引的级数。

有一点，一般聚集索引的非叶级层已经位于缓存中了，通常，大多数聚集索引的物理读取是发生在叶级的，与堆相比，额外的性能开
销只占一小部份。


------
表扫描或无序聚集索引扫描
sqlservr使用表的IAM页，按分区的文件顺序来扫描属于该表的各个区，只要没有文件系统碎片，读取操作就可以在磁盘驱动器上作为
一个连续的操作而完成，逻辑读取次数应该等到于该表使用的页数.


如果你不需要数据是有序的，就不要请求数据排序，以允许潜在地使用分配顺序扫描，而且对于大型的索引顺序扫描，应该解决索引
中的碎片问题。

select orderid,orderdate from orders order by orderid
记住，在聚集表上，非聚集索引将使用聚集键作为行定位符，在我们的例子中，聚集键包含orderdate值，该值也可以用于覆盖查询，
而且，这个非聚集索引中的第一个键列是orderid列，正好是在查询的order by 子句中指定的列，因此优化器自然会选择有序索引
扫描作为访问方法。

分配顺序扫描的性能不受索引中逻辑碎片的影响，因为它只是按文件进行扫描，但碎片会影响索引顺序扫描的性能。

--关于页拆分
扫描期间发生页拆分，分配顺序扫描可能在结果中多次返回某些行，也可能忽略掉某些行，插入一个新行，对索引键进行更新都可以
导致页拆分，让行发生移动，对可变长度的列进行更新，也可以导致页拆分，对行进行扩展。
*/