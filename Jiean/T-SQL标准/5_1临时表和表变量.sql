

--临时表和表变量

/*
临时表和表变量功能上类似，功能上区别在于表变量可以作为存储过程返回参数，而临时表不行。

从性能上区别：sqlserver会像对待实体表一样，在临时表上维护统计信息，用户也可以在上面建立索引，而表变量上，即
不能建索引，也不会有统计信息，sqlServer在做执行计划的时候，总是认为表变量里的数据量只有很少的几行。

两种临时表的特点：
表变量维护成本代，大量并发使用时对系统的负担比临时表要低，缺点是没有统计信息，存放大量的数据时性以很难保证。
所以，表变量比较适合放一些很小的结果集，且通常是遍历查询。

临时表的功能和实体表接近，能够为大数据集做优化，缺点是维护成本比较高，大量并发使用临时表，会对系统带来比较重
的负荷，所以临时表比较适合放一些大的结果集。
*/


/*


表变量
1. 为什么要使用表变量

表变量是从2000开始引入的，微软认为与本地临时表相比，表变量具有如下优点：
  a.与其他变量的定义一样，表变量具有良好的定义范围，并会被自动清除；
  b.在存储过程中使用表变量会减少存储过程重新编译的发生；
  c.表变量需要更少的锁请求和日志资源；
  d.可以在表变量上使用UDF,UDDT,XML。

2.表变量的限制

与临时表相比，表变量存在着如下缺点：
  a.在表变量上没有统计信息，查询优化器根据固定的预估值来选择执行计划，在数据很多的情况下，会导致查询优化器选择很差的执行计划；
  b.不能直接在表变量上创建索引，但可以通过创建约束（主键、唯一）来建立索引；
  c.在DECLARE后，不能再对表变量进行更改；
  d.不能对表变量执行 SELECT INTO语句；
  e.不能通过EXEC或sp_executesql来执行牵涉到表变量的动态SQL语句，但如果表变量是在动态SQL语句内定义的，则可以。

3.那什么时候可以使用表变量

要使用表变量应该根据如下规则来判断：
  a.表的行数；
  b.使用表变量能够减少的重新编译次数；
  c.查询的类型和对索引或者统计信息的依赖程度；
  d.需要生用UDF,UDDT,XML的时候。
其实也就说，得从实际出发，根据具体的查询，作出具体的选择。但是，其中很关键的一点，
如果表的行数非常多，使用表变量其实是更费资源的。有人提出了这样的建议：对于行数较少的情况下(小于1000行）
可以使用表变量；如果行数很多（有几万行），则使用临时表。

因此，在实际的开发中，应通过分别使用临时表或表变量进行对比后，才作出决定。


4.使用表变量的误区

对于表变量，很多人认为，表变量和其他变量一样，只存在内存中，其实这是不正确的，表变量也存在tempdb中。
可以通过下面例子进行对比。*/

CREATE TABLE #TempTable (TT_Col1 INT)

DECLARE @TableVariable TABLE (TV_Col1 INT)

SELECT TOP 2 *

FROM tempdb.sys.objects

ORDER BY create_date DESC


name
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#03317E3D
#TempTable__________________________________________________________________________________________________________000000000003


#03317E3D就是刚创建的表变量；

/*5.其他

  表变量不受rollback影响，某些情况下会破坏数据的完整性。*/

CREATE TABLE #TempTable (TT_Col1 INT)
DECLARE @TableVariable TABLE (TV_Col1 INT)
INSERT #TempTable VALUES (1)
INSERT @TableVariable VALUES (1)
BEGIN TRANSACTION
     INSERT #TempTable VALUES (2)
      INSERT @TableVariable VALUES (2)
ROLLBACK
SELECT * FROM #TempTable

/*
TT_Col1
-------
1
*/

SELECT * FROM @TableVariable
--返回了两条记录
/*
TV_Col1
-------
1
2
*/

