

--索引策略
/*
?如果使创建的索引更有效

A,聚集索引

	聚集索引决定了表格里记录的排列顺序，如果一张表经常用某种顺序检索数据，那按照这个顺序建立聚集索引无矣是最理想的。
	表格常见的检索方式是创建该索引的一个重要标准。
	为了提高可检索性，聚集索引最好要建立在重复值很少的字段上。

B,非聚集索引

	非聚集索引是辅助索引，可以在聚集索引覆盖不到却又是经常检索的字段上创建非聚集索引。该索引不用一定要很少重复，但
	如果返回的字段不出现在索引中，sql要做bookmark lookup,会占用些额外的开销。

C,Covering Index 复合索引/涵盖索引

	在一组字段上建立索引
	如果检索的条件，本身是一组字段的组合，直接在上面建索引，检索会更快。
	如果涵盖了需要查询的所有字段，就不需要作bookmark lookup操作了。

	复合索引的第一个字段尽量选择一个重复记录最少的字段，这是因为索引上的统计信息只保存第一个字段的数据直方图，如果选
	一个重复数据多的字段，这个索引的可选度就比较低了，会影响索引的价值。

	sql server 会按照索引里字段的组合值，建立B-对，字段越多，排序的代价就越高，维护这个索引的代价也就越高。	

D,Index with Included Columns 具有包含性列的索引

	包含性列的索引不会在包含列上产生索引，也就是说索引B-树不对包含列进行排序。
	比如常见按ID检索，返回id值和名称，在名称上排序是多余的，只在返回字段中查询出名称，则可以使用包含性列的索引
	
E,Indexed View 索引视图

视图只是一个逻辑定义，它里面并没有存储任何数据，对它的查询会转向到对它所基于的表格的查询，如果一个视图的定义比交
复杂，那么对它的查询会比较耗时。

在视图上创建索引，如果索引能够覆盖查询 使用到的所有字段，那查询就不必去访问基础表格，可以提高和视图相关的语句性能。	
*/
