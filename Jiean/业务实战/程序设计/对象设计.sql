

--对象设计

/*
实体对象是业务的发起者，他们是业务逻辑的主导对象，每一个实体以象都可能会有自己的属性和值。

实体对象其作用分为：
1）业务主导对象：他们是业务逻辑的发起者，比如公司，客户，供应商
2）业务的处理对象：是业务流转中处理的对象，比如货品
3）业务的控制对象：是业务流程中起控制作用的对象。

在数据库中，如何组织实体对象的性属和值呢？

介绍一些对象的设计方法及他们的优缺点：

A)EAV 键--值结构


适合场景：

每一个键值对占一条记录，可以无限的扩展
获取单个属性值比较方便，只需提供属性名称即可。

缺点：
1，完整性约束不强，无法保证键值对的重复出现，因为你很难在表结构上建立一个数据完整性的约束来保证的属生的唯一性。
2，无法声明强制属性，因为不同的属性值都存于一列上，不能对值进行约束，只能是使用通用数据类型，比如字符型来兼顾所有属性。
3，属性-值横排，对这种情况，不得不使用多次关联让属性值横排显示。

应用：
这种设计结构主要体现在键-值对上的可扩展性，一般用于控制对象，这类对象多是参数的集合，键-值，扩展，是参数集合的特点.

为了解决键值完整性的约束，需要建主从表进行约束。

具体应用：
*/

--主表：定义所有的参数的键名，主键是内码ID,附加可以有参数的描述说明等。
create table Sys_ParameterItem(
SysParaID varchar(20)		--内码ID
,SysParaCode varchar(20)	--代码code
,ItemIndex INT				--排序
,SysParaName varchar(40)	--参数名称
,Remark varchar(100)		--说明
,PRIMARY KEY(SysParaID)
)

--从表:外键主表内码ID，设置相应的属性-值
CREATE TABLE Sys_ParameterDetail(
	companyID VARCHAR(20), --公司
	sysParaID VARCHAR(20), --内码ID
	SysParacode  VARCHAR(20), --代码code
	SysParaValue VARCHAR(40)	--值
	,PRIMARY KEY(companyID,sysParaID)
)

-------------------
/*
B)单表继承



C）实体继承

D)对象继承
*/