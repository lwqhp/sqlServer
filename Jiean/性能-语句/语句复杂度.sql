

--语句复杂度
/*
语句越复杂，性能越差，调优的空间越小，所以我们尽量避免语句过于复杂。

注意点：
1）动态语句
这类语句往往跟据用户选据的条件来拼接语句，如果用户选择的条件太我，或者条件返回的记录太多，就有可能会造成问题。
而有些能够过滤大量数据或者在索上的条件如果没有被选上，就有可能造成在大表上的table Scan .最好在程序里有动态语句
复杂度的控制机制，限制选择的条件，限制返回记录的数量。

2）表格连接的数量
因业务需求，关联过多的表格，的OLTP系统中，性能不会太好。建议降低范式级别，多保存一些冗余数据列，以减少表格连接的数量。

3）视图和存储过程的深度
视图和存储过程的嵌套，最好不要越过三层，嵌套会造成执行计划复杂度累加，对性能有影响

4）不必要的排序和计算
对一个大结果集做排序，或者求唯一值，都是非常昂贵的计算，会占用大量系统资源。如果用户对结果集排序或唯一性的要求不高，可以适当去
掉这些计算

5）超大结果集申请和返回
筛选的条件返回十几万条记录，就需要考虑返回记录数的控制，用户是否需要浏览这么多的数据。

6） 用多个简单语句替代一个复杂语句
如果一个复杂语句有很多张表要连接要做很多计算，很多时候，要根据表和表得逻辑关系，知道某一张表和另一张如果先做连接，
可能会过滤掉更多的数据，得到的小的结果集再做其他连接，会更快，类似的，有些计算可以先做，也可以后做，人在了解了表
格的逻辑以后，会知道是先做好还是后做好，可惜sqlserver作为在语句太复杂的时候，可能就看不出来。

为了提高性能，对这种特别复杂的语句，可以把一句话折成两句，甚至三句话分步做完，中间结果集，可以以临时表的形式存放。
*/